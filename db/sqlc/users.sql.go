// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username,
                   hashed_password,
                   email,
                   full_name)
VALUES ($1, $2, $3, $4)
RETURNING username, hashed_password, full_name, email, create_at, password_changed_at
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	Email          string `json:"email"`
	FullName       string `json:"full_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.Email,
		arg.FullName,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.CreateAt,
		&i.PasswordChangedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :one
SELECT username, hashed_password, full_name, email, create_at, password_changed_at
FROM users
WHERE username = $1
limit 1
`

func (q *Queries) GetUsers(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUsers, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.CreateAt,
		&i.PasswordChangedAt,
	)
	return i, err
}
